server:
  port: 10090

spring:
  application:
    name: SPRING-BOOT-ZMJPROJECT01
  base:
    datasource:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://127.0.0.1:3306?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false&allowPublicKeyRetrieval=true
      username: root
      password: 123456
  dev:
    datasource:
      type: com.alibaba.druid.pool.DruidDataSource
#      driver-class-name: com.mysql.jdbc.Driver
      driver-class-name: com.mysql.cj.jdbc.Driver
      jdbc-url: jdbc:mysql://locklevel-mysql-dev1-india.cluster-cwgnjbpmvvmh.ap-southeast-1.rds.amazonaws.com?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
      username: dev1_idina_master_rw
      password: 4x&v_6bu^x!x$m$#*rv_$tx6c+udfo9@
  test:
    datasource:
      type: com.alibaba.druid.pool.DruidDataSource
      driver-class-name: com.mysql.cj.jdbc.Driver
      #hpx-test(aws环境的数据库)
      jdbc-url: jdbc:mysql://locklevel-mysql-test1.cluster-cwgnjbpmvvmh.ap-southeast-1.rds.amazonaws.com:3306?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
      username: lltest1_master_rw
      password: +vfxrhplu+xy!yc@jr*wz$6^b&16#4av
  data:
    elasticsearch:
#      cluster-name: myes
      cluster-nodes: localhost:9200

  redis:
    host: 127.0.0.1
    port: 6379
    database: 0
    password: 123456
#    pool:
#      max-active: 100
#      max-idle: 10
#      max-wait: 100000
#    timeout: 0
  kafka:
    bootstrap-servers: 127.0.0.1:9092 #指定kafka server的地址，集群配多个，中间，逗号隔开
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      retries: 0
      ack: 1
      max-block-ms: 6000
      batch-size: 4096
      linger-ms: 1
      buffer-memory: 40960
      max-request-size: 1048576
      compression-type: none
    consumer:
      group-id: consumer_group1 #群组ID
      enable-auto-commit: true
      auto-commit-interval: 1000
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      atuo-offset-reset: earliest
      session-timeout-ms: 15000
      auto-coomit-interval-ms: 100

  rabbitmq:
    #测试环境
    ssl:
      enabled: true
    host: b-47fa98e5-facd-4c12-a1cd-bc861b9192e8.mq.ap-southeast-1.amazonaws.com
    port: 5671
    username: saas-rmq-test
    password: nPOd6exIGhRFeDFpaml
    saas:
      channel: GjFt
      queue:
        fundingrate: tfbee.test.GjFt.queue.fundingrate
        externalTicker: tfbee.test.GjFt.queue.externalLatestTicker
        externalDepth: tfbee.test.GjFt.queue.externalDepth
        indexPrice: tfbee.test.GjFt.queue.indexprice
        markPrice: tfbee.test.GjFt.queues.markprice
      exchange:
        fundingrate: tfbee.test.exchange.fundingrate
        externalTicker: tfbee.test.exchange.externalLatestTicker
        externalDepth: tfbee.test.exchange.externalDepth
        indexPrice: tfbee.test.exchange.indexprice
        markPrice: tfbee.test.exchange.markprice
    l2quote:
      exchange:
        ticker: tfbee.test.l2quote_topic
        depth: tfbee.test.orderbook
        indexPrice: tfbee.test.indexprice
        markPrice: tfbee.test.markprice
        fundingrate: tfbee.test.fundingrate
        spotfills: tfbee.test.spotfills
        kline: tfbee.test.kline
    options:
      exchange:
        optionTicker: tfbee.dev.exchange.optionTicker
      queue:
        optionTicker: tfbee.dev.xxOi.queue.optionTicker

    #币晟模拟环境
#    ssl:
#      enabled: true
#    addresses: ${spring.rabbitmq.host}:${spring.rabbitmq.port}
#    host: b-f35e9ffc-167a-4cb8-85a9-2b93eb07adf3.mq.ap-southeast-1.amazonaws.com
##    host: mq-demo.saas-inf.com
#    port: 5671
#    username: saas-rmq-demo
#    password: z59jg9BuIhKCp82f
##    mode: cluster
#    saas:
#      channel: Ch3Q
#      queue:
#        externalTicker: tfbee.demo.Ch3Q.queue.externalLatestTicker
#      exchange:
#        externalTicker: tfbee.demo.exchange.externalLatestTicker

socket:
  config:
#    重试次数
    reConnectNum: 20
    #    url: wss://www-demo.manniwd.com/v1/np/ws
    url: wss://dev1.123kj.top/v1/np/ws
#    url: wss://np-dev1.tfbeee.com/v1/np/ws
#    url: wss://www-demo.hpx.today/v1/np/ws
#    url: ws://localhost:8081/websocket/test
#    url: wss://ws.chimchim.top
#    url: ws://192.168.216.163:8651/v1/np/ws
#    url: wss://app.913139.me/v1/np/ws
#    币王生产
#    url: wss://appws.chuciyishu.com/
#    币王模拟
#    url: wss://www-demo.ezhslid.cn/v1/np/ws
#    测试pusher
#    url: ws://ws-test1.tfbeee.shop/
#    测试行情
#    url: wss://x.chimchim.top/v1/np/ws
#    url: wss://www.burjbit.com/v1/np/ws
    key: hpx-dev
#    榴莲模拟pusher
#    url: wss://ws.ullucky.org/
#    榴莲模拟行情
#    url: wss://app.ullucky.org/v1/np/ws

#    hpx模拟环境
#    url: wss://www.hpxshop.me/v1/np/ws

#    币晟模拟环境生产
#    url: wss://www-demo.sefvbs.com/v1/np/ws
#    key: sunbit



## Mybatis 连接
mybatis :
  typeAliasesPackage : com.zmj.demo.domain
  mapperLocations : classpath:mapper/*.xml