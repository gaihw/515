package com.port.test;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Properties;
import java.util.Random;

import org.apache.commons.httpclient.HttpClient;

import com.port.util.BaseUtil;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

public class Warehouse {
	public static HttpClient client = new HttpClient();
	public static String url = "http://192.168.200.150:10020/v1/contract/market/kline";
	public static File file = new File("data/data1.txt");
	public static String FilePath = "pro/pro1.properties";
	public static FileWriter fw ;
	//是否爆仓标示
	public static boolean flage_pro ;
	//当天的零点零分
	public static long start_time_pro ;
	//上次爆仓时间
	public static long time_pro ;
	//一共爆仓几次
	public static int acount_warehouse_pro ;
	//爆仓累计
	public static double sum_pro ;
	//当前爆仓值
	public static double now_warehouse_pro ;
	//当天的结束时间
	public static long end_time_pro;
	//当天的爆仓累计
	public static double day_warehouse_pro;
	//大额爆仓单
	public static String big_warehouse_pro;
	//振幅计数
	public static int acount_emplitude_pro;
	//振幅总和
	public static double sum_emplitude_pro;
	//是否初始化
	public static boolean first_pro;
	public static long day_space = 86400000;
	static {	
		Date date = new Date(System.currentTimeMillis());
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		long timestamp = 0;
		try {
			Date date_ = format.parse(format.format(date));
			Calendar cal = Calendar.getInstance();
			cal.setTime(date_);
			timestamp = cal.getTimeInMillis();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		setValueByKey(FilePath,"start_time",String.valueOf(timestamp));
		setValueByKey(FilePath,"end_time",String.valueOf(timestamp+day_space));
		setValueByKey(FilePath,"day_warehouse","0.00");
		setValueByKey(FilePath,"flage","false");
		setValueByKey(FilePath,"time","1");
		setValueByKey(FilePath,"acount","0");
		setValueByKey(FilePath,"sum","0.0");
		setValueByKey(FilePath,"now_warehouse","0.0");
		setValueByKey(FilePath,"big_warehouse","0");
		start_time_pro = Long.valueOf(getValueByKey(FilePath,"start_time"));
		end_time_pro = Long.valueOf(getValueByKey(FilePath,"end_time"));
		day_warehouse_pro = Double.valueOf(getValueByKey(FilePath,"day_warehouse"));
		flage_pro = Boolean.valueOf(getValueByKey(FilePath,"flage"));
		time_pro = Long.valueOf(getValueByKey(FilePath,"time"));
		acount_warehouse_pro = Integer.valueOf(getValueByKey(FilePath,"acount_warehouse"));
		sum_pro = Double.valueOf(getValueByKey(FilePath,"sum"));
		now_warehouse_pro = Double.valueOf(getValueByKey(FilePath,"now_warehouse"));
		big_warehouse_pro = String.valueOf(getValueByKey(FilePath,"big_warehouse"));
		acount_emplitude_pro = Integer.valueOf(getValueByKey(FilePath,"acount_emplitude"));
		sum_emplitude_pro = Double.valueOf(getValueByKey(FilePath,"sum_emplitude"));
		first_pro = Boolean.valueOf(getValueByKey(FilePath,"first"));
		try {
			fw = new FileWriter(file);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public static void main(String[] args) {
		warehouse();
	}
	//计算某1分钟是否出现爆仓单
	public static void warehouse() { 
		long space = 3600000;
//		String params_1minuter = "" ;
//		if(flage_pro==true) {			
//			params_1minuter = "platformContractId=3&klineType=0&since="+time_pro;
//		}else {
		String params_1minuter = "platformContractId=3&klineType=0&since=";			
//		}
		JSONObject jsonobj = JSONObject.fromObject(BaseUtil.getResponse(client, url, params_1minuter));
		JSONArray data = jsonobj.getJSONArray("data");
		Double high = 0.00 ;//data.getJSONObject(data.size()-1).getDouble("high");
		Double low = 0.00 ;//data.getJSONObject(data.size()-1).getDouble("low");
		Double open = 0.00;//data.getJSONObject(data.size()-59).getDouble("open");
		//爆仓单量
		double warehouseVolume = 0 ;
		long time = data.getJSONObject(data.size()-1).getLong("time");
		//60分钟振幅
		Double Emplitude_temp = 0.00;
//		for(int i = data.size()-59 ; i < data.size() ; i ++) {
			Double[] d =highOrLow(data,data.size());
			high = d[0];
			low = d[1];
			open = d[2];
			Emplitude_temp = emplitude(high,low,open);
//		}
		Double averageEmplitude_temp = averageEmplitude(time);
		int max = 30;
		int min = 50;
		Random random = new Random();
		Double random_temp = (double) ((random.nextInt(max)%(max-min+1) + min))/100;
		//当前振幅大于等于振幅平均价*1.4&&60分钟之外
		if(Emplitude_temp >= averageEmplitude_temp*1.4 && time >= time_pro+space ) {
			flage_pro = true;
			warehouseVolume = data.getJSONObject(data.size()-1).getDouble("volume")*random_temp;
			setValueByKey(FilePath,"flage","true");
			setValueByKey(FilePath,"time",String.valueOf(time));			
			setValueByKey(FilePath,"acount_warehouse",String.valueOf(acount_warehouse_pro+1));			
			setValueByKey(FilePath,"sum",String.valueOf(sum_pro+warehouseVolume));			
			setValueByKey(FilePath,"now_warehouse",String.valueOf(warehouseVolume));		
			if(warehouseVolume >= sum_pro/acount_warehouse_pro*1.4) {
				setValueByKey(FilePath,"big_warehouse",String.valueOf(warehouseVolume+"{"+time+"}"+"/"));	
				System.out.println("该仓为大额爆仓单，time{"+time+"}");
			}
			if(time >= start_time_pro && time <= end_time_pro) {
				day_warehouse_pro += warehouseVolume ;
				setValueByKey(FilePath,"day_warehouse",String.valueOf(day_warehouse_pro));					
			}
		}
//		Object[] obj = {flage_pro,warehouseVolume};
//		return obj;
	}
	/**
	 * 获取100个样本的振幅平均价
	 * @return
	 */
	public static Double averageEmplitude(long now_time) {
		int acount = acount_emplitude_pro ;
		//1000根振幅和
		Double emplitude_sum = sum_emplitude_pro;
		if(first_pro==false) {			
			String space = "66000000" ;//1100个总共的毫秒数
//			long start_time = System.currentTimeMillis();
			long start_time = Long.valueOf("1568105400000");
			long run_time = start_time-Long.parseLong(space);
			String params_1minute = "platformContractId=1&klineType=0&since="+run_time;
			JSONObject jsonobj = JSONObject.fromObject(BaseUtil.getResponse(client, url, params_1minute));
			JSONArray data = jsonobj.getJSONArray("data");
			Double high;
			Double low;
			Double open;
			try {
				fw.write("length--->"+data.size()+"\r\n");
				fw.flush();
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
			if(data.size()>=1060) {
				for(int i = data.size()-1000 ; i < data.size() ; i ++) {
					Double[] d =highOrLow(data,i);
					high = d[0];
					low = d[1];
					open = d[2];
					emplitude_sum += emplitude(high,low,open);
					acount += 1;
					try {
						fw.write(String.valueOf(acount)+"--->"+String.valueOf(emplitude(high,low,open))+"\r\n");
						fw.flush();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
//			for(int i = 1059 ; i < data.size(); i++) {
//				time = data.getJSONObject(i).getLong("time");
//				if(time==now_time) {
//					flage = true;
//				}
//			}
//			if(flage == true) {				
//				for (int i = 1059; i < data.size(); i++) {
//					time = data.getJSONObject(i).getLong("time");
//					if( i == data.size()-1) {
//						break;
//					}
//					if(time == now_time) {
//						Double[] d =highOrLow(data,i);
//						high = d[0];
//						low = d[1];
//						open = d[2];
//						emplitude_sum += emplitude(high,low,open);
//						acount += 1;
//						break;
//					}else {				
//						Double[] d =highOrLow(data,i);
//						high = d[0];
//						low = d[1];
//						open = d[2];
//						emplitude_sum += emplitude(high,low,open);
//						acount += 1;
//					}
//				}
//			}
			}else {
				System.out.println("data的列表不足1060{"+data.size()+"}");
			}
			setValueByKey(FilePath,"first","true");
		}else {
			String params_1minute = "platformContractId=1&klineType=0&since="+now_time;
			JSONObject jsonobj = JSONObject.fromObject(BaseUtil.getResponse(client, url, params_1minute));
			JSONArray data = jsonobj.getJSONArray("data");
			Double high;
			Double low;
			Double open;
			long time = 0 ;
//			int acount = acount_emplitude_pro ;
//			//1000根振幅和
//			Double emplitude_sum = sum_emplitude_pro;
			int start_index = 60 ;
//			if(data.size()>=1060) {
				for(int i = data.size()-1 ; i >= data.size()-60 ; i --) {
					Double[] d =highOrLow(data,i);
					high = d[0];
					low = d[1];
					open = d[2];
					emplitude_sum += emplitude(high,low,open);
					acount += 1;
				}
//			}
		}
		setValueByKey(FilePath,"acount_emplitude",String.valueOf(acount));			
		setValueByKey(FilePath,"sum_emplitude",String.valueOf(emplitude_sum));
		return emplitude_sum/acount ;		
	}
	/**
	 * 
	 * @param data 数据源
	 * @param index 起始的位置
	 * @return
	 */
	public static Double[] highOrLow(JSONArray data,int index){
		Double[][] d = new Double[3][60];
		d[2][0] = data.getJSONObject(index-59).getDouble("open");
		int temp = 0 ;
		Double max = 0.00; 
		Double min = 0.00;
		for(int i = index - 59 ; i <= index ; i++) {
			d[0][temp] = data.getJSONObject(i).getDouble("high");
			d[1][temp] = data.getJSONObject(i).getDouble("low");
			temp += 1;
		}
		for(int i = 0 ; i < d[0].length ; i++) {
			max = d[0][0];
			min = d[1][0];
			if(d[0][i]>max){
				max = d[0][i];
			} 
			if(min>d[1][i]){
				min=d[1][i];
			}
		}
		Double[] result = {max,min,d[2][0]};
		return result;
	}
	/**
	 * 计算振幅
	 * @param high
	 * @param low
	 * @param open
	 * @return
	 */
	public static Double emplitude(Double high,Double low,Double open) {
		DecimalFormat df=new DecimalFormat("0.00000000000000000000");//设置保留位数		 
	    return Double.valueOf(df.format((float)(high-low)/open));
	}
	public static String getValueByKey(String filePath, String key)  {
		Reader fileReader;
		try {
			fileReader = new FileReader(filePath);
			Properties properties = new Properties();
			properties.load(fileReader);
			fileReader.close();
			return properties.getProperty(key);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return null;
		}
	}
	public static void setValueByKey(String filePath, String key,String value) {
		FileInputStream fis = null;
		FileOutputStream fos = null;
		try {
		    fis = new FileInputStream(filePath);
		    Properties prop = new Properties();
		    prop.load(fis);
		    prop.setProperty(key, value);
		    prop.setProperty(key, value);
		    fos = new FileOutputStream(filePath);
		    prop.store(fos, null);
		} catch (Exception e) {
		    // TODO Auto-generated catch block
		    e.printStackTrace();
		}finally{
		    try {
		        fis.close();
		        fos.close();
		    } catch (IOException e) {
		        // TODO Auto-generated catch block
		        e.printStackTrace();
		    }
		     
		}
	}
}
