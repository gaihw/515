package com.spring.server;


import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;


import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
@Slf4j
@RestController
@Api(value="/",description = "这是全部的get方法")
public class GetMethod {
	
	@Value("great")
	String grade;
	
	@Value("${student.age}")
	String age;
	
	/**
	 * get方法测试
	 * @return
	 */
	@RequestMapping(value="/get",method=RequestMethod.GET)
	public String get_Test() {
		log.info("age:{},grade:{}",age,grade);
		return "这是get方法的测试...age==="+age;
	}
	/**
	 * get请求，响应返回带有cookie信息
	 * @param response
	 * @return
	 */
	@RequestMapping(value="/get/cookie",method=RequestMethod.GET)
	@ApiOperation(value="响应携带cookie",httpMethod = "GET")
	public String get_CookiesTest(HttpServletResponse response) {
		Cookie cookie = new Cookie("gaihongwei", "111111");
		Cookie cookie1 = new Cookie("gaihongwei01", "000000");
		response.addCookie(cookie);
		response.addCookie(cookie1);
		return "响应携带cookie成功...";
	}
	/**
	 * 信息头携带cookie访问get接口
	 * @param request
	 * @return
	 */
	@RequestMapping(value="/get/with/cookie",method=RequestMethod.GET)
	@ApiOperation(value="携带cookie访问get/with/cookie接口成功",httpMethod = "GET")
	public String get_WithCookiesTest(HttpServletRequest request) {
		Cookie[] cookies = request.getCookies();
		if(Objects.isNull(cookies)) {
			return "cookie不能为空";
		}
		if(cookies[0].getName().equals("gaihongwei")&&cookies[0].getValue().equals("111111")&&
				cookies[1].getName().equals("gaihongwei01")&&cookies[1].getValue().equals("000000")){
			return "携带cookie访问get/with/cookie接口成功";
		}
//		for(Cookie cookie : cookies) {
//			if((cookie.getName().equals("gaihongwei")&&cookie.getValue().equals("111111"))||
//					(cookie.getName().equals("gaihongwei01")&&cookie.getValue().equals("000000"))) {
//				return "携带cookie访问get/with/cookie接口成功";
//			}
//		}
		return "cookie有误";
	}
	/**
	 * url中携带参数，请求头带有cookie，访问get请求，响应结果返回cookie信息
	 * @param start
	 * @param end
	 * @return
	 */
	@RequestMapping(value="/get/parameter",method=RequestMethod.GET)
	@ApiOperation(value="geonetList",httpMethod = "GET")
	public Map<String, String> get_ParametertTest(HttpServletResponse response,
			HttpServletRequest request,
			@RequestParam Integer start,
			@RequestParam Integer end){
		Map<String, String> map = new HashMap<String, String>();
		Cookie cookie = new Cookie("gaihongwei", "111111");
		Cookie cookie1 = new Cookie("gaihongwei01", "000000");
		response.addCookie(cookie);
		response.addCookie(cookie1);
		Cookie[] cookies = request.getCookies();
		if(Objects.isNull(cookies)) {
			map.put("message", "cookie不能为空");
			return map;
		}else if(cookies[0].getName().equals("gaihongwei")&&cookies[0].getValue().equals("111111")&&
				cookies[1].getName().equals("gaihongwei01")&&cookies[1].getValue().equals("000000")){
			map.put("gaihongwei", "000000");
			map.put("gaihongwei01", "111111");
			map.put("gaihongwei02", "222222");
			return map;
		}else {			
			map.put("message", "cookie有误");
			return map;
		}	
	}
	/**
	 * 参数在路径中进行访问
	 * @param start
	 * @param end
	 * @return
	 */
	@RequestMapping(value="/gettwoList/{start}/{end}",method=RequestMethod.GET)
	@ApiOperation(value="getwotList",httpMethod = "GET")
	public Map<String, String> gettwoList(@PathVariable Integer start,
			@PathVariable Integer end){
		Map<String, String> map = new HashMap<String, String>();
		map.put("gaihongwei", "000000");
		map.put("gaihongwei01", "111111");
		map.put("gaihongwei02", "222222");
		return map;		
	}
	/**
	 * 参数为Integer数组在路径中进行访问
	 * @param start
	 * @return
	 */
	@RequestMapping(value="/get/parameterList",method=RequestMethod.GET)
	@ApiOperation(value="getParameterList",httpMethod = "GET")
	public Integer getParameterList(@RequestParam Integer[] start){
		int count = 0;
		for (int i = 0; i < start.length; i++) {
			count += start[i];
			
		}
		return count;		
	}
	/**
	 * 参数为Object数组在路径中进行访问
	 * @param start
	 * @return
	 * @request Example:http://localhost:8890/get/parameterObjectList?start=1,2,3,5,7,7=7,aafadf
	 * @response ["1","2","3","5","7","7=7","aafadf"]
	 */
	@RequestMapping(value="/get/parameterObjectList",method=RequestMethod.GET)
	@ApiOperation(value="getParameterObjectList",httpMethod = "GET")
	public Object getParameterObjectList(@RequestParam Object[] start){
		return start;		
	}
	/**
	 * 这个接口，调用登录/v1/post/login接口，并返回结果
	 * @return
	 */
	@RequestMapping(value="/get/logintest",method=RequestMethod.GET)
	public String get_loginTest() {
		String url = "http://localhost:8890/v1/post/login";
		RestTemplate restTemplate = new RestTemplate();
	    HttpHeaders headers = new HttpHeaders();
	    headers.setContentType(MediaType.MULTIPART_FORM_DATA);
	    MultiValueMap<String, String> map= new LinkedMultiValueMap<String, String>();
	    map.add("username", "gaihongwei");
	    map.add("password", "111111");
	    HttpEntity<MultiValueMap<String, String>> request = new HttpEntity<MultiValueMap<String, String>>(map,headers);
//	    ResponseEntity<String> response = restTemplate.postForEntity( url, request , String.class );
	    ResponseEntity<String> response = restTemplate.postForEntity( url, request , String.class );
		return response.getBody();
	}
	/**
	 * 这个接口，调用/gettwoList/{start}/{end}接口，并返回结果
	 * @return
	 */
	@RequestMapping(value="/get/twolisttest",method=RequestMethod.GET)
	public Map<String, String> get_twoListTest() {
		String url = "http://localhost:8890/gettwoList/{1}/{4}";
		RestTemplate restTemplate = new RestTemplate();
		ResponseEntity<Map> response = restTemplate.getForEntity(url, Map.class,3,5,4);
//		Map<String, String> response = restTemplate.getForObject(url, Map.class);
		System.out.println(response.getHeaders());
		return response.getBody();
//		return response;
	}
}
